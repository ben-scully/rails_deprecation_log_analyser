association_reload_argument:
  log_line_includes: 'Passing an argument to force an association to reload'
  deprecated: 'Association reload argument'
  message: 'Passing an argument to force an association to reload is now deprecated and will be removed in Rails 5.1. Please call `reload` on the result collection proxy instead.'

attribute_changed_callback:
  log_line_includes: 'The behavior of `attribute_changed?` inside of after callbacks will be changing in the next version of Rails.'
  deprecated: '"attribute_changed?" inside of after callbacks'
  message: 'The behavior of `attribute_changed?` inside of after callbacks will be changing in the next version of Rails. The new return value will reflect the behavior of calling the method after `save` returned (e.g. the opposite of what it returns now). To maintain the current behavior, use `saved_change_to_attribute?` instead.'

attribute_was_callback:
  log_line_includes: 'The behavior of `attribute_was` inside of after callbacks will be changing in the next version of Rails.'
  deprecated: '"attribute_was" inside of after callbacks'
  message: 'The behavior of `attribute_was` inside of after callbacks will be changing in the next version of Rails. The new return value will reflect the behavior of calling the method after `save` returned (e.g. the opposite of what it returns now). To maintain the current behavior, use `attribute_before_last_save` instead.'

changed_attributes_callback:
  log_line_includes: 'The behavior of `changed_attributes` inside of after callbacks will be changing in the next version of Rails.'
  deprecated: '"changed_attributes" inside of after callbacks'
  message: 'The behavior of `changed_attributes` inside of after callbacks will be changing in the next version of Rails. The new return value will reflect the behavior of calling the method after `save` returned (e.g. the opposite of what it returns now). To maintain the current behavior, use `saved_changes.transform_values(&:first)` instead.'

changed_in_callback:
  log_line_includes: 'The behavior of `changed?` inside of after callbacks will be changing in the next version of Rails.'
  deprecated: '"changed?" inside of after callbacks'
  message: 'The behavior of `changed?` inside of after callbacks will be changing in the next version of Rails. The new return value will reflect the behavior of calling the method after `save` returned (e.g. the opposite of what it returns now). To maintain the current behavior, use `saved_changes?` instead.'

class_argument_in_active_record_query:
  log_line_includes: 'Passing a class as a value in an Active Record query is deprecated and will be removed. Pass a string instead.'
  deprecated: 'Class argument in ActiveRecord query'
  message: 'Passing a class as a value in an Active Record query is deprecated and will be removed. Pass a string instead.'

class_to_class_name:
  log_line_includes: 'Passing a class to the `class_name` is deprecated and will raise an ArgumentError in Rails 5.2'
  deprecated: 'Passing a class to the `class_name`'
  message: 'Passing a class to the `class_name` is deprecated and will raise an ArgumentError in Rails 5.2. It eagerloads more classes than necessary and potentially creates circular dependencies. Please pass the class name as a string.'
